// Generated by CoffeeScript 1.9.3
(function() {
  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  define(function() {
    var Metro;
    return Metro = (function() {
      function Metro(app, id) {
        this.app = app;
        this.grid = {};
        this.svg = Snap('#' + id);
        this.dom = $('#' + id);
        this.groups = this.create_groups();
        document.onkeydown = function(e) {
          return this.key_down(e);
        };
      }

      Metro.prototype.update = function(upt) {
        var _, id, n, ref, results, u;
        for (id in upt) {
          u = upt[id];
          this.grid[id].update(u);
        }
        ref = this.grid;
        results = [];
        for (_ in ref) {
          n = ref[_];
          results.push(n.update_tracks());
        }
        return results;
      };

      Metro.prototype.update_size = function() {
        var b, h, w;
        b = this.boundaries;
        w = this.app.style.tox(b[1]) + this.app.style.geometry.margins[0];
        h = this.app.style.toy(b[0]) + this.app.style.geometry.margins[1];
        this.dom.css('width', w);
        this.dom.css('height', h);
        return $('.metro').css('min-width', w);
      };

      Metro.property('selection', {
        get: function() {
          var n;
          for (n in this.grid) {
            if (n.is_selected) {
              return n;
            }
          }
        }
      });

      Metro.property('boundaries', {
        get: function() {
          var _, maxi, maxj, n, ref;
          maxi = maxj = 0;
          ref = this.grid;
          for (_ in ref) {
            n = ref[_];
            maxi = n.i > maxi ? n.i : maxi;
            maxj = n.j > maxj ? n.j : maxj;
          }
          return [maxi, maxj];
        }
      });

      Metro.prototype.create_groups = function() {
        var groups;
        groups = {
          active: this.svg.group(),
          inactive: this.svg.group(),
          active_nodes: this.svg.group(),
          active_tracks: this.svg.group(),
          inactive_nodes: this.svg.group(),
          inactive_tracks: this.svg.group(),
          shadow: this.svg.group(),
          grid: this.svg.group()
        };
        groups.active.add(groups.active_tracks);
        groups.active.add(groups.active_nodes);
        groups.inactive.add(groups.inactive_tracks);
        groups.inactive.add(groups.inactive_nodes);
        groups.inactive.attr({
          opacity: this.app.style.inactive_opacity
        });
        groups.shadow.add(groups.inactive);
        groups.shadow.add(groups.active);
        this.set_shadow(groups.shadow);
        return groups;
      };

      Metro.prototype.key_down = function(e) {
        e = e || window.event;
        if (e.key === 'Escape') {
          this.unselect_all();
          return this.app.inspector.update();
        }
      };

      Metro.prototype.unselect_all = function() {
        var _, e, ref, results;
        ref = this.grid;
        results = [];
        for (_ in ref) {
          e = ref[_];
          results.push(e.unselect());
        }
        return results;
      };

      Metro.prototype.set_shadow = function(e) {
        var f, s;
        s = this.app.style.shadow;
        f = this.svg.filter(Snap.filter.shadow(s.x, s.y, s.blur, s.color, s.opacity));
        return e.attr({
          filter: f
        });
      };

      return Metro;

    })();
  });

}).call(this);
