// Generated by CoffeeScript 1.9.3
(function() {
  var Style;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Style = (function() {
    function Style(app) {
      this.app = app;
      this.palette = ['#226597', '#f8b739', '#a6cb12', '#a380dc'];
      this.inactive_opacity = 0.3;
      this.geometry = {
        margins: [40, 40],
        scale: [70, 90]
      };
      this.track = {
        width: 10,
        smooth_factor: 0.6
      };
      this.node = {
        radius: 16,
        stroke_width: 8,
        fill: '#ffffff',
        highlight: {
          x: 0,
          y: 0,
          blur: 8,
          opacity: 0.9
        },
        completion: {
          opacity: 0.7,
          duration: 1000,
          angle_offset: -90
        }
      };
      this.shadow = {
        x: 0,
        y: 0,
        color: '#000000',
        blur: 4,
        opacity: 0.4
      };
    }

    Style.property('smooth_distance', {
      get: function() {
        return this.track.smooth_factor * this.geometry.scale[0];
      }
    });

    Style.prototype.tox = function(j) {
      return this.geometry.margins[0] + j * this.geometry.scale[0];
    };

    Style.prototype.toy = function(i) {
      return this.geometry.margins[1] + i * this.geometry.scale[1];
    };

    return Style;

  })();

  define(['navigation', 'metro', 'communication', 'node', 'inspector', 'devices_list', 'server_log', 'clues'], function(Navigation, Metro, Communication, Node, Inspector, DevicesList, ServerLog, Clues) {
    var Application;
    return Application = (function() {
      var devices;

      function Application() {}

      Application.style = new Style(Application);

      Application.metro = new Metro(Application, 'metro-svg');

      Application.inspector = new Inspector(Application);

      Application.devices_list = new DevicesList(Application);

      Application.server_log = new ServerLog(Application);

      Application.clues = new Clues(Application);

      Application.nav = new Navigation(Application);

      Application.com = new Communication(Application);

      Application.com.listen();

      devices = {
        1234: {
          name: "Arthur"
        }
      };

      Application.devices_list.update(devices)({
        init: function() {}
      });

      await(setTimeout((function() {
        return Application.nav.set_game_is_running(false);
      }), 2000));

      await(Application.load_metro_nodes()({
        set_game_is_running: function(is_running) {
          return this.nav.set_game_is_running(is_running);
        },
        update: function(upt) {
          this.metro.update(upt.nodes);
          return this.inspector.update();
        },
        load_metro_nodes: function() {
          var id, n, ref, ref1;
          $('#metro-svg').hide();
          $('.metro .loading').show();
          ref = init_tree['nodes'];
          for (id in ref) {
            n = ref[id];
            this.metro.grid[id] = new Node(this, id, n);
          }
          ref1 = init_tree['nodes'];
          for (id in ref1) {
            n = ref1[id];
            this.metro.grid[id].set_tracks(n.tracks);
          }
          this.metro.update_size();
          $('#metro-svg').show();
          return $('.metro .loading').hide();
        }
      }));

      return Application;

    })();
  });

}).call(this);
