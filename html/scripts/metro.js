// Generated by CoffeeScript 2.3.2
(function() {
  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  define(function() {
    var Metro;
    return Metro = (function() {
      class Metro {
        constructor(app, id) {
          this.app = app;
          this.grid = {};
          requirejs(['']);
          this.svg = Snap('#' + id);
          this.dom = $('#' + id);
          this.groups = this.create_groups();
          document.onkeydown = function(e) {
            return this.key_down(e);
          };
        }

        update(upt) {
          var _, id, n, ref, results, u;
          for (id in upt) {
            u = upt[id];
            this.grid[id].update(u);
          }
          ref = this.grid;
          // TODO not updating all tracks but only required
          results = [];
          for (_ in ref) {
            n = ref[_];
            results.push(n.update_tracks());
          }
          return results;
        }

        update_size() {
          var b, h, w;
          b = this.boundaries;
          w = this.app.style.tox(b[1]) + this.app.style.geometry.margins[0];
          h = this.app.style.toy(b[0]) + this.app.style.geometry.margins[1];
          this.dom.css('width', w);
          this.dom.css('height', h);
          return $('.metro').css('min-width', w);
        }

        create_groups() {
          var groups;
          groups = {
            active: this.svg.group(),
            inactive: this.svg.group(),
            active_nodes: this.svg.group(),
            active_tracks: this.svg.group(),
            inactive_nodes: this.svg.group(),
            inactive_tracks: this.svg.group(),
            shadow: this.svg.group(),
            grid: this.svg.group()
          };
          groups.active.add(groups.active_tracks);
          groups.active.add(groups.active_nodes);
          groups.inactive.add(groups.inactive_tracks);
          groups.inactive.add(groups.inactive_nodes);
          groups.inactive.attr({
            opacity: this.app.style.inactive_opacity
          });
          groups.shadow.add(groups.inactive);
          groups.shadow.add(groups.active);
          this.set_shadow(groups.shadow);
          return groups;
        }

        key_down(e) {
          e = e || window.event;
          if (e.key === 'Escape') {
            this.unselect_all();
            return this.app.inspector.update();
          }
        }

        unselect_all() {
          var _, e, ref, results;
          ref = this.grid;
          results = [];
          for (_ in ref) {
            e = ref[_];
            results.push(e.unselect());
          }
          return results;
        }

        set_shadow(e) {
          var f, s;
          s = this.app.style.shadow;
          f = this.svg.filter(Snap.filter.shadow(s.x, s.y, s.blur, s.color, s.opacity));
          return e.attr({
            filter: f
          });
        }

      };

      Metro.property('selection', {
        get: function() {
          var n;
          for (n in this.grid) {
            if (n.is_selected) {
              return n;
            }
          }
        }
      });

      Metro.property('boundaries', {
        get: function() {
          var _, maxi, maxj, n, ref;
          maxi = maxj = 0;
          ref = this.grid;
          for (_ in ref) {
            n = ref[_];
            maxi = n.i > maxi ? n.i : maxi;
            maxj = n.j > maxj ? n.j : maxj;
          }
          return [maxi, maxj];
        }
      });

      return Metro;

    }).call(this);
  });

}).call(this);
