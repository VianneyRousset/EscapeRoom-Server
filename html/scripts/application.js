// Generated by CoffeeScript 2.3.2
(function() {
  var Style;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Style = (function() {
    class Style {
      constructor(app) {
        this.app = app;
        this.palette = ['#226597', '#f8b739', '#a6cb12', '#a380dc'];
        this.inactive_opacity = 0.3;
        this.geometry = {
          margins: [40, 40],
          scale: [70, 90]
        };
        this.track = {
          width: 10,
          smooth_factor: 0.6
        };
        this.node = {
          radius: 16,
          stroke_width: 8,
          fill: '#ffffff',
          highlight: {
            x: 0,
            y: 0,
            blur: 8,
            opacity: 0.9
          },
          completion: {
            opacity: 0.7,
            duration: 1000,
            angle_offset: -90
          }
        };
        this.shadow = {
          x: 0,
          y: 0,
          color: '#000000',
          blur: 4,
          opacity: 0.4
        };
      }

      tox(j) {
        return this.geometry.margins[0] + j * this.geometry.scale[0];
      }

      toy(i) {
        return this.geometry.margins[1] + i * this.geometry.scale[1];
      }

    };

    Style.property('smooth_distance', {
      get: function() {
        return this.track.smooth_factor * this.geometry.scale[0];
      }
    });

    return Style;

  }).call(this);

  define(['navigation', 'metro', 'communication', 'node', 'inspector', 'devices_list', 'server_log', 'clues'], function(Navigation, Metro, Communication, Node, Inspector, DevicesList, ServerLog, Clues) {
    var Application;
    return Application = class Application {
      constructor() {
        this.style = new Style(this);
        this.metro = new Metro(this, 'metro-svg');
        this.inspector = new Inspector(this);
        this.devices_list = new DevicesList(this);
        this.server_log = new ServerLog(this);
        this.clues = new Clues(this);
        this.nav = new Navigation(this);
        this.com = new Communication(this);
        this.com.listen();
      }

      async init() {
        setTimeout((() => {
          return this.nav.set_game_is_running(false);
        }), 2000);
        return (await this.load_metro_nodes());
      }

      set_game_is_running(is_running) {
        return this.nav.set_game_is_running(is_running);
      }

      update(upt) {
        this.metro.update(upt.nodes);
        return this.inspector.update();
      }

      async load_metro_nodes() {
        var id, init_tree, n, ref, ref1;
        $('#metro-svg').hide();
        $('.metro .loading').show();
        init_tree = (await this.com.get_init_tree());
        ref = init_tree['nodes'];
        for (id in ref) {
          n = ref[id];
          this.metro.grid[id] = new Node(this, id, n);
        }
        ref1 = init_tree['nodes'];
        for (id in ref1) {
          n = ref1[id];
          this.metro.grid[id].set_tracks(n.tracks);
        }
        this.metro.update_size();
        $('#metro-svg').show();
        return $('.metro .loading').hide();
      }

    };
  });

}).call(this);
